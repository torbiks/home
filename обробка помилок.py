
class MyException(Exception):  # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –≤–∏–Ω—è—Ç–∫—É
    def __str__(self):
        return '–•–µ–ª–ª–æ—É, —Ü–µ –º–æ—è –≤–ª–∞—Å–Ω–∞ –ø–æ–º–∏–ª–∫–∞!)'


def raiser(n: int):
    match n:
        case 1:
            raise ValueError  # –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–º–∏–ª–∫–∏
        case 2:
            raise FloatingPointError
        case 3:
            raise IndexError('–¶–µ –º—ñ–π –≤–ª–∞—Å–Ω–∏–π IndexError!ü§Ø')
        case 4:
            raise KeyboardInterrupt
        case 5:
            raise MyException


try:
    raiser(5)

    number_1 = int(input('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ 1: '))  # ValueError
    number_2 = int(input('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ 2: '))  # ValueError

    result = number_1 / number_2  # ZeroDivisionError
    print(result)
except ValueError:  # –æ–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—É ValueError
    print('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
except ZeroDivisionError:
    print('–ù–µ –º–æ–∂–Ω–∞ –¥—ñ–ª–∏—Ç–∏ –Ω–∞ –Ω—É–ª—å!')
except ArithmeticError:
    print('–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞!')
except Exception as exc:
    print(f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {exc}')
except KeyboardInterrupt:
    print('–í–∏ –∑–∞–∫—Ä–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º—É –≤—Ä—É—á–Ω—É!')
else:  # —Å–ø—Ä–∞—Ü—å–æ–≤—É—î, —è–∫—â–æ –Ω–µ –±—É–ª–æ –ø–æ–º–∏–ª–æ–∫
    print('ELSE')
finally:  # —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –≤ –±—É–¥—å-—è–∫–æ–º—É —Ä–∞–∑—ñ –≤ –∫—ñ–Ω—Ü—ñ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –Ω–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞ except
    print('FINALLY')

# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è —É—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –º–∞—Ç–∏: 1 try —ñ –∞–±–æ finally, –∞–±–æ 1 except