# Списки

'''
Колекції значень:
1. list, tuple
2. dict
3. set, frozenet
'''

# 1. Створення списку
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
names = ['Сергій', "Боб", 2, "Антон", "Олег", "Богдан"]
soup_list = ['hello', 10, False, None, print, 2345.5, {
        "number_task": "2",
        "name_task": "2323",
        "text_task": "456575687"
    }]
empty_list = list()

# 2. Робота з індексами
print(soup_list[-1]['number_task'])  # отримання елемента за індексом
# print(names[1:4])  # отримання підсписку за зрізом
#
# names[2] = "Ольга"  # заміна значення за індексом (так можна, бо список - змінювальна послідовність)
#
# # 3. Методи списку
# # 3. 1. Розширення
# names.append('Роман')  # додає новий елемент В КІНЕЦЬ списку
# names.insert(2, 'Денис')  # вставляє новий елемент на конкретний індекс
#
# # 3. 2. Видалення
# names.remove(2)  # видаляє елемент по значенню
# print(names)
# # names.remove('Боб')  # якщо елементу вже не існує - ValueError
#
# el = names.pop(0)  # видаляє елемент по індексу(якщо не вказувати індекс - видаляє останній)
# print(f'Видалений елемент: {el}')  # окрім видалення, елемент повертається (у змінню, тощо)
# # empty_list.pop()  # при спробі виклику з порожнім списком - помилка

# 3. 3. Стандартні методи
# names.clear()  # очищає список (стає порожнім)

# print(names.index("Денис"))  # повертає індекс елемента (по значенню)
#
# print(names.count('Сергій'))  # повертає кількість елементів (може бути 0)
#
# names_copy = names.copy()  # повертає автономну копію списку (не пов'язану з оригіналом)
#
# # 4. Сортування
# names.reverse()  # розвертає список навпаки
# names.sort(key=len, reverse=True)  # сортування

# 5. Ітерація та функції
# print(len(numbers))  # кількість елементів
#
# print(sum(numbers))
# print(min(numbers))
# print(max(numbers))

# for el in names:
#     print(f'Ім`я: {el.upper()}')
#
# # 6. Кортеж
# t = 1, 2, 3, 4, 5  # кортеж - незмінювальна версія списку
#
# print(t[2])
# #
# for el in t:
#     print(el)
# #
# # t = list(t)
# # print(t)
# #
# # t = tuple(t)
# # print(t)